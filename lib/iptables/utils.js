// Tables.
exports.tables = {
	filter  : 'filter',     // The default table (if no -t option is passed). It contains the built-in chains INPUT (for packets destined to local sockets), FORWARD (for packets being routed through the box), and OUTPUT (for locally-generated packets).
	nat     : 'nat',        // Consulted when a packet that creates a new connection is encountered.  It consists of three built-ins: PREROUTING (for altering packets as soon as they come  in), OUTPUT (for altering locally-generated packets before routing), and POSTROUTING (for altering packets as they are about to go out).
	mangle  : 'mangle',     // Used for specialized packet alteration.  Until kernel 2.4.17 it had two built-in chains: PREROUTING (for altering incoming packets before routing) and OUTPUT (for altering locally-generated packets before routing).  Since kernel 2.4.18, three other built-in chains are also supported: INPUT (for packets coming into the box  itself),  FORWARD (for altering packets being routed through the box), and POSTROUTING (for altering packets as they are about to go out).
	raw     : 'raw',        // Used mainly for configuring exemptions from connection tracking in combination with the NOTRACK target.  It registers at the netfilter hooks with higher priority and is thus called before ip_conntrack, or any other IP tables.  It provides the following built-in chains: PREROUTING (for packets arriving via any network  interface)  OUTPUT (for packets generated by local processes)
	security: 'security'    // Used for Mandatory Access Control (MAC) networking rules, such as those enabled by the SECMARK and CONNSECMARK targets.  Mandatory Access Control is implemented by Linux Security Modules such as SELinux.  The security table is called after the filter table, allowing any Discretionary Access Control (DAC) rules in the  filter  table  to take effect before MAC rules.  This table provides the following built-in chains: INPUT (for packets coming into the box itself), OUTPUT (for altering locally-generated packets before routing), and FORWARD (for altering packets being routed through the box).
};

/**
 * Process common rule specs for `append`, `check`, `delete`, `insert` and `replace`.
 *
 * @param options
 * @returns {Array}
 */
exports.processCommonRuleSpecs = function (options) {
	var args = [];

	if (typeof options.protocol != 'undefined') {
		if (options.protocol.split('!').length > 1) {
			args = args.concat('! --protocol', options.protocol.split('!')[1]);
		}
		else {
			args = args.concat('--protocol', options.protocol);
		}
	}

	if (typeof options.source != 'undefined') {
		if (options.source.split('!').length > 1) {
			args = args.concat('! --source', options.source.split('!')[1]);
		}
		else {
			args = args.concat('--source', options.source);
		}
	}

	if (typeof options.destination != 'undefined') {
		if (options.destination.split('!').length > 1) {
			args = args.concat('! --destination', options.destination.split('!')[1]);
		}
		else {
			args = args.concat('--destination', options.destination);
		}
	}

	if (typeof options['in-interface'] != 'undefined') {
		if (options['in-interface'].split('!').length > 1) {
			args = args.concat('! --in-interface', options['in-interface'].split('!')[1]);
		}
		else {
			args = args.concat('--in-interface', options['in-interface']);
		}
	}

	if (typeof options['out-interface'] != 'undefined') {
		if (options['out-interface'].split('!').length > 1) {
			args = args.concat('! --out-interface', options['out-interface'].split('!')[1]);
		}
		else {
			args = args.concat('--out-interface', options['out-interface']);
		}
	}

	if (typeof options.fragment != 'undefined') {
		if (options.fragment.split('!').length > 1) {
			args = args.concat('! --fragment');
		}
		else {
			args = args.concat('--fragment');
		}
	}

	/*
	 * Matches processing.
	 */
	if (typeof options.matches != 'undefined') {
		for (var match in options.matches) {
			if (options.matches.hasOwnProperty(match)) {
				// Initial match load.
				args = args.concat('--match', match);

				// Specific match options.
				var this_match = options.matches[match];

				for (var match_option in this_match) {
					if (this_match.hasOwnProperty(match_option)) {
						if (typeof this_match[match_option] == 'string'
							&& this_match[match_option].split('!').length > 1) {

							args = args.concat('! --' + match_option, this_match[match_option].split('!')[1]);
						}
						else {
							args = args.concat('--' + match_option, this_match[match_option]);
						}
					}
				}
			}
		}
	}

	if (typeof options.goto != 'undefined') {
		args = args.concat('--goto', options.goto);
	}

	if (typeof options.jump != 'undefined') {
		args = args.concat('--jump', options.jump);

		// Target extension options.
		if (typeof options.target_options != 'undefined') {
			for (var target_option in options.target_options) {
				if (options.target_options.hasOwnProperty(target_option)) {
					args = args.concat('--' + target_option, options.target_options[target_option]);
				}
			}
		}
	}

	return args;
};